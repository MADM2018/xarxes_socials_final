"use strict";
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const readline_1 = __importDefault(require("readline"));
/**
 * Read JSONL one line at a time
 *
 * @param {string} filepath filepath
 * @returns {AsyncIterableIterator<T>}
 * @example
 *
 * const rl = readlines<T>(filepath)
 *
 * while (true) {
 *     const {value, done} = await rl.next()
 *     if (done) break;
 *     console.log(value); // value => T
 * }
 */
function readlines(filepath) {
    return __asyncGenerator(this, arguments, function* readlines_1() {
        var e_1, _a;
        const lineReader = readline_1.default.createInterface({ input: fs_1.default.createReadStream(filepath) });
        try {
            for (var lineReader_1 = __asyncValues(lineReader), lineReader_1_1; lineReader_1_1 = yield __await(lineReader_1.next()), !lineReader_1_1.done;) {
                const line = lineReader_1_1.value;
                yield yield __await(JSON.parse(line));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (lineReader_1_1 && !lineReader_1_1.done && (_a = lineReader_1.return)) yield __await(_a.call(lineReader_1));
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
exports.readlines = readlines;
/**
 * Read JSONL multiple lines at a time
 *
 * @param {string} filepath filepath
 * @param {number} maxlines maximum number of lines per iter.next()
 * @returns {AsyncIterableIterator<T[]>}
 * @example
 *
 * const rl = readlinesChunk<T>(filepath, 100)
 *
 * while (true) {
 *     const {value, done} = await rl.next()
 *     if (done) break;
 *     console.log(value); // value => Array<T>
 * }
 */
function readlinesChunk(filepath, maxlines) {
    return __asyncGenerator(this, arguments, function* readlinesChunk_1() {
        let lines = [];
        const iter = yield __await(readlines(filepath));
        while (true) {
            const { value, done } = yield __await(iter.next());
            if (done) {
                break;
            }
            lines.push(value);
            if (lines.length >= maxlines) {
                yield yield __await(lines);
                lines = [];
            }
        }
        if (lines.length) {
            yield yield __await(lines);
        }
    });
}
exports.readlinesChunk = readlinesChunk;
